{
	"info": {
		"_postman_id": "05c377e4-7289-4688-8938-1d60d5dd8ff7",
		"name": "Book Store Api",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 200\",()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2a88f8f6-b819-4f21-97a9-d2f0c1c36b1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userName\" : \"TeamNumpy5\",\n\"password\" : \"sdetNumpy@05\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/Account/v1/Authorized"
					},
					"response": []
				},
				{
					"name": "authorized Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 201\",()=>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9fb15b9d-f4e6-4bd1-a697-bebe7b8f6fe7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "TeamNumpy_05",
								"password": "sdetNumpy@05"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userName\" : \"TeamNumpy5\",\n\"password\" : \"sdetNumpy@05\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://bookstore.toolsqa.com/Account/v1/GenerateToken"
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 201\",()=>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6e8fcb47-4a06-48c7-bdfe-c1c069387085",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "Basic VGVhbU51bXB5NTpzZGV0TnVtcHlAMDU="
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6IlRlYW1OdW1weTUiLCJwYXNzd29yZCI6InNkZXROdW1weUAwNSIsImlhdCI6MTc0MTYxODA5Nn0.PmFSmQ7q8vOG33qEHQeIs2gvWXWNjvILYk4AHykIoj0"
							}
						],
						"url": "{{BaseUrl}}/Account/v1/User/{{userId}}"
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 201\",()=>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d9667571-9b6f-4b54-b926-4bc5c3bc62aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "Basic VGVhbU51bXB5NTpzZGV0TnVtcHlAMDU="
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6IlRlYW1OdW1weTUiLCJwYXNzd29yZCI6InNkZXROdW1weUAwNSIsImlhdCI6MTc0MTYxODA5Nn0.PmFSmQ7q8vOG33qEHQeIs2gvWXWNjvILYk4AHykIoj0"
							}
						],
						"url": "https://bookstore.toolsqa.com/Account/v1/User/c2083211-c21a-4c4a-9025-383dcbc9d359"
					},
					"response": []
				}
			],
			"id": "e2f38f3d-394f-418f-8081-1de81a7c0536"
		},
		{
			"name": "BookStore",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"// Stores the first ISBN from the response data in an environment variable",
									"var jsonResponse = pm.response.json();",
									"var isbn = jsonResponse.books[0].isbn;",
									"pm.environment.set(\"first_isbn\", isbn);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"// Store all the ISBNs from the response data in an environment variable",
									"var jsonResponse = pm.response.json();",
									"var allIsbns = jsonResponse.books.map(book => book.isbn);",
									"var specificIsbn = allIsbns[1];",
									"pm.environment.set(\"second_isbn\",specificIsbn);",
									"pm.environment.set(\"all_isbns\", JSON.stringify(allIsbns));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d761b362-62cb-45ca-a4d1-198cda7a6826",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "get book by isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a573917b-7ca7-4373-9a0b-3691dff2dfc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bookstore.toolsqa.com/BookStore/v1/Book?ISBN={{first_isbn}}",
							"protocol": "https",
							"host": [
								"bookstore",
								"toolsqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "{{first_isbn}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add book",
					"id": "280ea835-70ac-41cf-bcba-0e2af3fb109f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"{{first_isbn}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "Add Multiple book",
					"id": "f817ac88-fce3-4684-b990-e4f73f50a362",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"{{first_isbn}}\"\n    },\n    {\n      \"isbn\": \"{{second_isbn}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "update book by isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "93f212e2-23d8-4aa8-9ece-98cb16bf0f2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"isbn\": \"{{second_isbn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books/{{first_isbn}}"
					},
					"response": []
				},
				{
					"name": "delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ba0037ff-db54-4b8a-87fd-9fc44d95c868",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isbn\": \"{{second_isbn}}\",\n  \"userId\": \"{{userId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Book"
					},
					"response": []
				},
				{
					"name": "Delete Multiple book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b3a53eb1-ce49-4b70-aa82-83e235d6c8f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/BookStore/v1/Books?UserId={{userId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "0bca007a-859c-498a-bc77-fb7c6ce742f9"
		},
		{
			"name": "End to End testing",
			"item": [
				{
					"name": "[3]authorized Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 201\",()=>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e364f4d1-a09b-4a7a-b450-c599cd940d4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "TeamNumpy_05",
								"password": "sdetNumpy@05"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userName\" : \"TeamNumpy5\",\n\"password\" : \"sdetNumpy@05\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://bookstore.toolsqa.com/Account/v1/GenerateToken"
					},
					"response": []
				},
				{
					"name": "[4]authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 200\",()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1499bce5-f776-401c-9985-68fec82d5d15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userName\" : \"{{userName}}\",\n\"password\" : \"sdetNumpy@05\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/Account/v1/Authorized"
					},
					"response": []
				},
				{
					"name": "[5]Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 201\",()=>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "36e02821-037e-49b9-a265-1766e16bdc0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "Basic VGVhbU51bXB5NTpzZGV0TnVtcHlAMDU="
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6IlRlYW1OdW1weTUiLCJwYXNzd29yZCI6InNkZXROdW1weUAwNSIsImlhdCI6MTc0MTYxODA5Nn0.PmFSmQ7q8vOG33qEHQeIs2gvWXWNjvILYk4AHykIoj0"
							}
						],
						"url": "https://bookstore.toolsqa.com/Account/v1/User/{{userId}}"
					},
					"response": []
				},
				{
					"name": "[6]Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"// Stores the first ISBN from the response data in an environment variable",
									"var jsonResponse = pm.response.json();",
									"var isbn = jsonResponse.books[0].isbn;",
									"pm.environment.set(\"first_isbn\", isbn);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"// Store all the ISBNs from the response data in an environment variable",
									"var jsonResponse = pm.response.json();",
									"var allIsbns = jsonResponse.books.map(book => book.isbn);",
									"var specificIsbn = allIsbns[1];",
									"pm.environment.set(\"second_isbn\",specificIsbn);",
									"pm.environment.set(\"all_isbns\", JSON.stringify(allIsbns));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7b9b9879-4314-4998-b896-6726d5ea4101",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "[7]get book by isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b65133fe-5993-481d-902f-89887cd70e50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bookstore.toolsqa.com/BookStore/v1/Book?ISBN={{first_isbn}}",
							"protocol": "https",
							"host": [
								"bookstore",
								"toolsqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "{{first_isbn}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[8]Add book",
					"id": "e013e899-ac7a-4463-b1a4-12e24f93b293",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"{{first_isbn}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "[9]Add Multiple book",
					"id": "81261ea5-c636-4d8a-8964-ebc7566e96cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"{{first_isbn}}\"\n    },\n    {\n      \"isbn\": \"{{second_isbn}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "[10]update book by isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d56803b3-4d3e-44de-ba65-cfb825a45d71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"isbn\": \"{{second_isbn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books/{{first_isbn}}"
					},
					"response": []
				},
				{
					"name": "[11]Delete Multiple book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "19e4988f-7f33-4b36-b889-0f12320b749a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/BookStore/v1/Books?UserId={{userId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[12]delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "158e53ad-89d1-479c-adf0-671d50a05585",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isbn\": \"{{first_isbn}}\",\n  \"userId\": \"{{userId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Book"
					},
					"response": []
				},
				{
					"name": "[13]delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 201\",()=>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b6ddf877-f6ba-4c32-ad31-8891412e9739",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "Basic VGVhbU51bXB5NTpzZGV0TnVtcHlAMDU="
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6IlRlYW1OdW1weTUiLCJwYXNzd29yZCI6InNkZXROdW1weUAwNSIsImlhdCI6MTc0MTYxODA5Nn0.PmFSmQ7q8vOG33qEHQeIs2gvWXWNjvILYk4AHykIoj0"
							}
						],
						"url": "https://bookstore.toolsqa.com/Account/v1/User/{{user_ID}}"
					},
					"response": []
				}
			],
			"id": "3e45bbc0-4dff-4fd9-a980-e636f725daef",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7c9e6e3-3497-484a-b931-acda30dfb7b6",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Generate a random number and append it to the username",
							"const randomNumber = Math.floor(Math.random() * 1000); // Generates a number between 0 and 999",
							"//const username = `TeamNumpy${randomNumber}`;",
							"var username = 'TeamNumpy*0123';",
							"",
							"console.log(\"Generated Username:\", username);",
							"",
							"pm.sendRequest({",
							"    url: 'https://bookstore.toolsqa.com/Account/v1/User',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"userName\": username,",
							"            \"password\": \"sdetNumpy@05\"",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.log(\"Error during user creation:\", err);",
							"        return;",
							"    }",
							"",
							"       console.log(\"User Creation Status Code:\", res.code); // Use res.code",
							"    console.log(\"User Creation Response Body:\", res.raw); // Use res.raw",
							"    console.log(\"User Creation Response JSON:\", res.json());",
							"",
							"    if (res.code === 201||res.code===200) {",
							"        console.log(\"User created successfully, proceeding to get token.\");",
							"         var userName = res.json().username;",
							"          pm.environment.set(\"userName\", userName);",
							"          var user_ID= res.json().userID;",
							"          pm.environment.set(\"user_ID\", user_ID);",
							"        ",
							"",
							"        pm.sendRequest({",
							"            url: 'https://bookstore.toolsqa.com/Account/v1/GenerateToken',",
							"            method: 'POST',",
							"            header: {",
							"                'Content-Type': 'application/json'",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({",
							"                    \"userName\": username, // Use the stored username",
							"                    \"password\": \"sdetNumpy@05\"",
							"                })",
							"            }",
							"        }, function (err, res) {",
							"            if (err) {",
							"                console.log(\"Error getting token:\", err);",
							"                return;",
							"            }",
							"",
							"            console.log(\"Token Generation Response Body:\", res.json());",
							"",
							"            if (res.code === 200) {",
							"                var auth_token = res.json().token;",
							"                pm.environment.set(\"auth_token\", auth_token);",
							"                console.log(\"Token generated and saved to environment.\");",
							"            } else {",
							"                console.log(\"Token generation failed. Response:\", res.json());",
							"            }",
							"        });",
							"    } else {",
							"        console.log(\"User creation failed. Response:\", res.json());",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "712808e7-bb68-4166-979d-eeed79bc2df6",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "end to end testing new",
			"item": [
				{
					"name": "[1]create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aee2e2e8-1fab-44f2-983b-430c40fee6e6",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"pm.environment.set(\"variable_key\", \"variable_value\");",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var user_Id = pm.response.json().userID;",
									"pm.environment.set(\"userId\", user_Id);",
									"var userName = pm.response.json().username;",
									"pm.environment.set(\"userName\", userName);",
									"",
									"pm.test(\"Response schema is valid\", function () {",
									"    var schema = {",
									"        type: \"object\",",
									"        properties: {",
									"            userID: { type: \"string\" },",
									"            username: { type: \"string\" },",
									"            books: { type: \"array\" }",
									"        },",
									"        required: [\"userID\", \"username\", \"books\"],",
									"    };",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response has the required fields - userID, username, and books\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.userID).to.exist;",
									"    pm.expect(responseData.username).to.exist;",
									"    pm.expect(responseData.books).to.exist;",
									"});",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"pm.test(\"Books is an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.books).to.be.an('array');",
									"});",
									"",
									"pm.test(\"UserID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.userID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"UserID should not be empty\");",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"User ID is a valid UUID format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.userID).to.match(/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/);",
									"});",
									"",
									"",
									"pm.test(\"Books array should not be null\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.books).to.not.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"pm.test(\"Validate the userID and username combination is unique\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('userID').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('username').that.is.a('string');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1d3f6526-adb9-41d0-afc8-a01918ba9718",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6a179e21-5427-437a-8ec4-b71359c5dba7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userName\" : \"TeamNumpy05**\",\n\"password\" : \"sdetNumpy@05\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/Account/v1/User"
					},
					"response": []
				},
				{
					"name": "[2]Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 200\",()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var token = pm.response.json().token;",
									"pm.environment.set(\"token\", token);",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('token');",
									"  pm.expect(responseData.token).to.be.a('string');",
									"  pm.expect(responseData).to.have.property('expires');",
									"  pm.expect(responseData.expires).to.be.a('string');",
									"  pm.expect(responseData).to.have.property('status');",
									"  pm.expect(responseData.status).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Presence of required fields in the response body\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist;",
									"    pm.expect(responseData.expires).to.exist;",
									"});",
									"",
									"// Test to validate the schema of the entire response body",
									"pm.test(\"Schema validation for the entire response body\", function () {",
									"  const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"      token: { type: \"string\" },",
									"      expires: { type: \"string\" },",
									"      status: { type: \"string\" }",
									"    },",
									"    required: [\"token\", \"expires\", \"status\"]",
									"  };",
									"  ",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05aca414-b93f-466d-b77d-004e6ac449f1",
								"exec": [
									"const requestPayload = ",
									" {",
									"\"userName\" : pm.environment.get(\"userName\"),",
									"\"password\" : \"sdetNumpy@05\"",
									"}",
									"",
									"pm.collectionVariables.set(\"requestPayload\", JSON.stringify(requestPayload));",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "12a01de4-75f8-432c-af2e-dbc740a1339d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://bookstore.toolsqa.com/Account/v1/GenerateToken"
					},
					"response": []
				},
				{
					"name": "[4]authorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81802d2d-b6c9-475e-b9af-1bc6ea4369c1",
								"exec": [
									"const requestPayload = ",
									" {",
									"\"userName\" : pm.environment.get(\"userName\"),",
									"\"password\" : \"sdetNumpy@05\"",
									"}",
									"",
									"pm.collectionVariables.set(\"requestPayload\", JSON.stringify(requestPayload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "33782361-0a12-440d-97de-5f29346973b9",
								"exec": [
									"pm.test(\"status code is 200\",()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has a valid JSON schema\", function () {",
									"    pm.response.to.have.jsonSchema({",
									"        \"type\": \"boolean\"",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bbc5e328-f292-4292-87da-08097cc1a999",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/Account/v1/Authorized"
					},
					"response": []
				},
				{
					"name": "[5]Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0972f6-73e1-410c-824d-542ed689debb",
								"exec": [
									"pm.test(\"status code is 200\",()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"User ID is not empty\", () => {",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response body has valid data types\", () => {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.userId).to.be.a('string');",
									"    pm.expect(responseBody.username).to.be.a('string');",
									"   ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5de4c98d-00c6-4dc7-baa8-59f953ec6a22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "Basic VGVhbU51bXB5NTpzZGV0TnVtcHlAMDU="
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6IlRlYW1OdW1weTUiLCJwYXNzd29yZCI6InNkZXROdW1weUAwNSIsImlhdCI6MTc0MTYxODA5Nn0.PmFSmQ7q8vOG33qEHQeIs2gvWXWNjvILYk4AHykIoj0"
							}
						],
						"url": "https://bookstore.toolsqa.com/Account/v1/User/{{userId}}"
					},
					"response": []
				},
				{
					"name": "[6]Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788d434a-1e23-47d1-a139-a82e019cbad5",
								"exec": [
									"// Stores the first ISBN from the response data in an environment variable",
									"var jsonResponse = pm.response.json();",
									"var isbn = jsonResponse.books[0].isbn;",
									"pm.environment.set(\"first_isbn\", isbn);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"// Store all the ISBNs from the response data in an environment variable",
									"var jsonResponse = pm.response.json();",
									"var allIsbns = jsonResponse.books.map(book => book.isbn);",
									"var specificIsbn = allIsbns[1];",
									"pm.environment.set(\"second_isbn\",specificIsbn);",
									"var third_isbn = allIsbns[2];",
									"pm.environment.set(\"third_isbn\",third_isbn)",
									"var fourth_isbn = allIsbns[3];",
									"pm.environment.set(\"fourth_isbn\",fourth_isbn)",
									"pm.environment.set(\"all_isbns\", JSON.stringify(allIsbns));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a16ade62-5b60-4709-8d8a-80002b7eed2b",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2fe225cc-d32f-40d1-a805-53723e3423ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "[7]get book by isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.isbn).to.be.a('string');",
									"    pm.expect(responseData.title).to.be.a('string');",
									"    pm.expect(responseData.subTitle).to.be.a('string');",
									"    pm.expect(responseData.author).to.be.a('string');",
									"    pm.expect(responseData.publish_date).to.exist;",
									"    pm.expect(responseData.publisher).to.be.a('string');",
									"    pm.expect(responseData.pages).to.be.a('number');",
									"    pm.expect(responseData.description).to.be.a('string');",
									"    pm.expect(responseData.website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2fccf70a-6394-46bb-9b54-21296f43e732",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bookstore.toolsqa.com/BookStore/v1/Book?ISBN={{first_isbn}}",
							"protocol": "https",
							"host": [
								"bookstore",
								"toolsqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "{{first_isbn}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[8]Add book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d48ee797-c4d5-4be8-971c-f84015806a0e",
								"exec": [
									"// Fixed the failing test for schema validation by defining 'ajv'",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validating the structure of the response body\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('books');",
									"    pm.expect(pm.response.json().books).to.be.an('array');",
									"    pm.expect(pm.response.json().books[0]).to.have.property('isbn');",
									"    pm.expect(pm.response.json().books[0].isbn).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Schema validation for the response body\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"books\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"isbn\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [\"isbn\"]",
									"                }",
									"            }",
									"        },",
									"        \"required\": [\"books\"]",
									"    };",
									"    pm.expect(ajv.validate(schema, pm.response.json())).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "af3c4673-cfa5-42e3-813f-5f380749c537",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"{{first_isbn}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "[9]Add Multiple book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "202110ff-c245-4eee-9569-435a7e41932b",
								"exec": [
									"// Validate the status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Validate the response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Perform schema validation of the response body",
									"pm.test('Schema is valid', function () {",
									"    const schema = {",
									"        ",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"books\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"isbn\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"isbn\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"isbn\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"isbn\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"books\"",
									"  ]",
									"}",
									"});",
									"",
									"// Validate the data types in the response body",
									"pm.test('Data types are valid', function () {",
									"    pm.response.to.have.jsonBody('status');",
									"    pm.response.to.have.jsonBody('message');",
									"    pm.response.to.have.jsonBody('data');",
									"    pm.response.to.have.jsonBody('data[*].userId');",
									"    pm.response.to.have.jsonBody('data[*].collectionOfIsbns');",
									"    pm.response.to.have.jsonBody('data[*].collectionOfIsbns[*].isbn');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fd3ec94c-e635-4611-9ab9-39e4cca447ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"{{third_isbn}}\"\n    },\n    {\n      \"isbn\": \"{{second_isbn}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books"
					},
					"response": []
				},
				{
					"name": "[10]update book by isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.books).to.be.an('array');",
									"    ",
									"    pm.expect(responseData.books[0].isbn).to.be.a('string');",
									"    pm.expect(responseData.books[0].title).to.be.a('string');",
									"    pm.expect(responseData.books[0].subTitle).to.be.a('string');",
									"    pm.expect(responseData.books[0].author).to.be.a('string');",
									"    pm.expect(responseData.books[0].publish_date).to.exist;",
									"    pm.expect(responseData.books[0].publisher).to.be.a('string');",
									"    pm.expect(responseData.books[0].pages).to.be.a('number');",
									"    pm.expect(responseData.books[0].description).to.be.a('string');",
									"    pm.expect(responseData.books[0].website).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ISBN is stored in an environment variable\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.books[0].isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									"pm.test(\"Schema validation for response body\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"books\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"isbn\": { \"type\": \"string\" },",
									"                        \"title\": { \"type\": \"string\" },",
									"                        \"subTitle\": { \"type\": \"string\" },",
									"                        \"author\": { \"type\": \"string\" },",
									"                        \"publish_date\": { \"type\": \"string\" },",
									"                        \"publisher\": { \"type\": \"string\" },",
									"                        \"pages\": { \"type\": \"number\" },",
									"                        \"description\": { \"type\": \"string\" },",
									"                        \"website\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [\"isbn\", \"title\", \"subTitle\", \"author\", \"publish_date\", \"publisher\", \"pages\", \"description\", \"website\"]",
									"                }",
									"            }",
									"        },",
									"        \"required\": [\"books\"]",
									"    };",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "86887f89-fe00-4503-aa6e-ecc0abee90c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"isbn\": \"{{fourth_isbn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Books/{{first_isbn}}"
					},
					"response": []
				},
				{
					"name": "[12]delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"// Perform schema validation for the response body",
									"pm.test('Schema is valid', () => {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"message\": { \"type\": \"string\" }",
									"            // Add more properties as per the expected response schema",
									"        },",
									"        \"required\": [\"message\"]",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Validate the data types in the response body",
									"pm.test('Response data types are valid', () => {",
									"    pm.expect(pm.response.json().message).to.be.a('string');",
									"  });  ",
									"// Validate the status code",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response body message",
									"pm.test('Response body contains message', () => {",
									"    pm.expect(pm.response.json().message).to.be.a('string');",
									"    pm.expect(pm.response.json().message.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d75bbc4a-a1a4-4345-bbf9-6de07275f8fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isbn\": \"{{second_isbn}}\",\n  \"userId\": \"{{userId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/BookStore/v1/Book"
					},
					"response": []
				},
				{
					"name": "[11]Delete Multiple book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682cfa28-cfff-4347-b02b-81973423b2c0",
								"exec": [
									"// Perform schema validation for the response body",
									"pm.test('Schema is valid', () => {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"message\": { \"type\": \"string\" }",
									"            // Add more properties as per the expected response schema",
									"        },",
									"        \"required\": [\"message\"]",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Validate the data types in the response body",
									"pm.test('Response data types are valid', () => {",
									"    pm.expect(pm.response.json().message).to.be.a('string');",
									"});",
									"",
									"// Validate the status code",
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Validate the response body message",
									"pm.test('Response body contains message', () => {",
									"    pm.expect(pm.response.json().message).to.be.a('string');",
									"    pm.expect(pm.response.json().message.length).to.be.above(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bac5c94-2fa0-42ba-82a5-8b8ebd0d8140",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d65fb8aa-f25a-4493-b3df-8a46df1529ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/BookStore/v1/Books?UserId={{userId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[13]delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b6ee92-8818-40d3-95af-c8297aad3a12",
								"exec": [
									"pm.test(\"status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"id": "2c439cf7-b599-4cd8-8a76-e1996bf0a8d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "Basic VGVhbU51bXB5NTpzZGV0TnVtcHlAMDU="
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6IlRlYW1OdW1weTUiLCJwYXNzd29yZCI6InNkZXROdW1weUAwNSIsImlhdCI6MTc0MTYxODA5Nn0.PmFSmQ7q8vOG33qEHQeIs2gvWXWNjvILYk4AHykIoj0"
							}
						],
						"url": "https://bookstore.toolsqa.com/Account/v1/User/{{userId}}"
					},
					"response": []
				}
			],
			"id": "d8eed397-3d45-460c-85c8-eb12d4e58b3d",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "150fe2a3-c129-4bb0-b979-a8ab91607874",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "976fa9ad-31d2-4a3e-af28-9263f2c6756c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"",
							"pm.test(\"Content-Type is application/json (if present)\", function () {",
							"    const contentType = pm.response.headers.get('Content-Type');",
							"    ",
							"    // Only check Content-Type if it's present",
							"    if (contentType) {",
							"        pm.expect(contentType).to.include('application/json');",
							"    } else {",
							"        console.log(\"Content-Type header is not present (expected for 204 No Content)\");",
							"    }",
							"});",
							"",
							"pm.test(\"Response header has Connection\", function () {",
							"    pm.expect(pm.response.headers.has(\"Connection\")).to.be.true;",
							" });   ",
							"pm.test(\"Response header has Server\", function () {",
							"    pm.expect(pm.response.headers.has(\"Server\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Response header has X-Powered-By\", function () {",
							"    pm.expect(pm.response.headers.get(\"X-Powered-By\")).to.equal(\"Express\");",
							"});",
							"pm.test(\"Response header has ETag\", function () {",
							"    pm.expect(pm.response.headers.has(\"ETag\")).to.be.true;",
							"});",
							"",
							"",
							"",
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "requestPayload",
			"value": ""
		}
	]
}